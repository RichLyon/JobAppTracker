# Job Application Tracker - Project Intelligence

This file captures important project patterns, preferences, and intelligence that will help guide development decisions.

## Project Structure Patterns

### Frontend Patterns
- React components use `.js` extension, not `.jsx`
- Layout components in `src/components/layout/`
- Page components in `src/pages/`
- Services for API calls in `src/services/`
- Global theme configuration in `src/theme.js`
- ESLint warnings currently present for unused variables/imports - to be addressed

### Backend Patterns
- FastAPI application structure in `backend/app/`
- Each concern separated into its own module (database, models, AI integration, document handling)
- Database setup and models carried over from original application

## Development Workflow Preferences

### Frontend Development
- Using npm for package management
- React development server runs on port 3000
- Material UI for component library and styling
- React Router for navigation
- React Query for API data fetching and caching

### Backend Development
- Python virtual environment recommended
- FastAPI runs with uvicorn server
- SQLite database for persistence
- Ollama for AI integration must be running locally

## Critical Implementation Paths

### Document Processing
- The application needs to handle Word documents (.docx)
- File uploads/downloads are critical for resume and cover letter functionality
- python-docx is used for document manipulation

### AI Integration
- Ollama must be running locally for AI features to work
- Error handling for AI service availability is important
- AI is used for resume customization and cover letter generation

### Database Compatibility
- Maintaining compatibility with the existing SQLite database schema
- Two main tables: job_applications and user_information

## Known Challenges

### Frontend-Backend Integration
- File upload/download between React and FastAPI
- Proper error handling for API failures
- Managing document preview in the browser

### AI Service Dependencies
- Ollama needs to be running locally
- Error handling for when AI service is unavailable
- Proper prompt engineering for good results

### Document Processing
- Ensuring consistent formatting in generated documents
- Handling different document templates
- Previewing Word documents in the browser

## User Interface Expectations
- Clean, professional design
- Responsive layout that works on various screen sizes
- Clear feedback for actions (loading states, success/error messages)
- Intuitive navigation between different application sections
